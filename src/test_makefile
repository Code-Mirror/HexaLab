CC=g++
# A few notes on the options:
#
# -s PRECISE_F32=1 is needed because of a strange bug involving the assignments 
#           of floats. Actually asm.js uses doubles for most computation, 
#           this flags ensure a behavoiur more similar to the expected one.
# --bind    needed for exporting the functions from cpp to js.
# -s DEMANGLE_SUPPORT=1 More consistent naming of the cpp functions is preserved 
#           in asm.js. Useful for cpp stacktrace inside the browser. 
# Reasonable memory options: 
# 
# -s ALLOW_MEMORY_GROWTH=1 
# -s TOTAL_MEMORY=536870912
# -s TOTAL_MEMORY=1073741824 


CFLAGS= -I. -Ieigen

OBJ = hexalab_js.o \
			app.o \
			builder.o \
			color_map.o \
			loader.o \
			plane_filter.o \
			peeling_filter.o \
			quality_filter.o \
			mesh_navigator.o

DEPS = app.h \
			 builder.h \
			 color_map.h \
			 common.h \
			 hex_quality.h \
			 hex_quality_color_maps.h \
			 ifilter.h \
			 loader.h \
			 mesh.h \
			 mesh_navigator.h \
			 model.h \
			 peeling_filter.h \
			 plane_filter.h \
			 quality_filter.h

%.o: %.cpp $(DEPS)
	$(CC) -c -o $@ $< $(CFLAGS)

test: test.cpp $(OBJ) 
		$(CC) -o test/$@ $^ $(CFLAGS)
